plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    // --- NEW: Add the shadow plugin for packaging our library ---
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'org.perseus'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/" }
    maven { name = "mojang-libraries"
        url = "https://libraries.minecraft.net/" }
    maven { name = "placeholderapi-repo"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT")
    compileOnly("com.mojang:authlib:5.0.51")
    compileOnly("me.clip:placeholderapi:2.11.6")

    // --- NEW: Add the SQLite driver ---
    // We use 'implementation' because we need to package this library inside our plugin's JAR file.
    implementation("org.xerial:sqlite-jdbc:3.41.2.1")
}

// --- NEW: Configure the shadowJar task ---
// This task will correctly package the SQLite driver into our final plugin file.
shadowJar {
    relocate 'org.sqlite', 'org.perseus.forcePlugin.lib.sqlite'
    archiveBaseName.set(project.name)
    archiveClassifier.set('')
    archiveVersion.set(version)
}

// Tell the 'build' task to depend on our new shadowJar task
build.dependsOn shadowJar

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}